name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  LIGHTSAIL_INSTANCE_NAME: my-app-instance

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd app
        npm ci

    - name: Run tests
      run: |
        cd app
        npm test

    - name: Build application
      run: |
        cd app
        npm run build

    - name: Get Lightsail instance IP
      id: get-ip
      run: |
        INSTANCE_IP=$(aws lightsail get-instance --instance-name ${{ env.LIGHTSAIL_INSTANCE_NAME }} --query 'instance.publicIpAddress' --output text)
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "Instance IP: $INSTANCE_IP"

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/lightsail_key
        chmod 600 ~/.ssh/lightsail_key
        ssh-keyscan -H ${{ steps.get-ip.outputs.instance_ip }} >> ~/.ssh/known_hosts

    - name: Deploy to Lightsail instance
      run: |
        # Copy application files to the instance
        scp -i ~/.ssh/lightsail_key -r app/ ubuntu@${{ steps.get-ip.outputs.instance_ip }}:/tmp/
        
        # SSH into instance and deploy
        ssh -i ~/.ssh/lightsail_key ubuntu@${{ steps.get-ip.outputs.instance_ip }} << 'EOF'
          # Stop the application
          sudo systemctl stop myapp || true
          
          # Backup current version
          sudo cp -r /var/www/myapp /var/www/myapp.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Deploy new version
          sudo rm -rf /var/www/myapp
          sudo mv /tmp/app /var/www/myapp
          sudo chown -R www-data:www-data /var/www/myapp
          
          # Install/update dependencies
          cd /var/www/myapp
          sudo npm ci --production
          
          # Start the application
          sudo systemctl start myapp
          sudo systemctl enable myapp
          
          # Check if service is running
          sleep 5
          sudo systemctl status myapp
        EOF

    - name: Health check
      run: |
        # Wait for application to start
        sleep 10
        
        # Check if application is responding
        curl -f http://${{ steps.get-ip.outputs.instance_ip }}:3000/health || exit 1
        echo "Application deployed successfully!"

  # Alternative job for container deployment
  deploy-container:
    runs-on: ubuntu-latest
    if: false  # Set to true to enable container deployment instead
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and push Docker image
      run: |
        cd app
        
        # Build Docker image
        docker build -t my-app:latest .
        
        # Tag for Lightsail Container Service
        docker tag my-app:latest my-app:$(date +%Y%m%d_%H%M%S)
        
        # Push to Lightsail Container Service
        aws lightsail push-container-image \
          --service-name my-container-service \
          --label my-app \
          --image my-app:latest

    - name: Deploy to Lightsail Container Service
      run: |
        # Create deployment configuration
        cat > deployment.json << EOF
        {
          "containers": {
            "my-app": {
              "image": ":my-container-service.my-app.latest",
              "ports": {
                "3000": "HTTP"
              },
              "environment": {
                "NODE_ENV": "production"
              }
            }
          },
          "publicEndpoint": {
            "containerName": "my-app",
            "containerPort": 3000,
            "healthCheck": {
              "healthyThreshold": 2,
              "unhealthyThreshold": 2,
              "timeoutSeconds": 5,
              "intervalSeconds": 30,
              "path": "/health",
              "successCodes": "200-499"
            }
          }
        }
        EOF
        
        # Deploy the container
        aws lightsail create-container-service-deployment \
          --service-name my-container-service \
          --cli-input-json file://deployment.json
